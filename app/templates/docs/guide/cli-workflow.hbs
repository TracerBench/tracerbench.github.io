<article>
  <h2 id="intro">
    Command Line Interface Workflow
  </h2>
  <hr />
  <p>
    TracerBench is most commonly consumed two ways, via CLI and CI. The CLI allows for a developer to quickly run a
    performance benchmark locally. While leveraging TracerBench in CI, drastically aides in the flagging and prevention
    of a performance regression within a web application over time.</p>
  <p>The recommended way of leveraging TracerBench is via
    the <a target="_blank" href="https://www.npmjs.com/package/tracerbench">CLI</a>, which has two primary workflows:
  </p>

  <h2 id="compare">Compare Workflow</h2>
  <hr>
  <p> Comparing the performance delta between two builds, control vs experiment (most common workflow). This is
    executed with the <LinkTo @route='docs.api.compare'><code>`tracerbench compare`</code></LinkTo> command.
  </p>
  <h4>
    Instrument your web application
  </h4>
  <p>In your app you must place a marker to let TracerBench know that you are done rendering to the DOM, it searches
    forward from this to find the next paint event. This is done by using a <code>performance.mark</code> function call.
  </p>
  <h2 id="profile">Profile Workflow</h2>
  <hr>
  <p>Gaining insight into user-timings from a single Chrome trace. This is executed with the
    <LinkTo @route='docs.api.profile'><code>`tracerbench profile`</code></LinkTo> command.</p>

</article>