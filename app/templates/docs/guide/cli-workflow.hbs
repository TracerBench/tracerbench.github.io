<article>
  <h2 id="intro">
    Command Line Interface Workflow
  </h2>
  <hr />
  <p>
    TracerBench is most commonly consumed two ways, via CLI and CI. The CLI allows for a developer to quickly run a
    performance benchmark locally. While leveraging TracerBench in CI, drastically aides in the flagging and prevention
    of a performance regression within a web application over time. The <a target="_blank"
      href="https://www.npmjs.com/package/tracerbench">CLI</a> has two primary workflows:
  </p>

  <h2 id="compare">Compare Workflow</h2>
  <hr>
  <p> Comparing the performance delta between two builds, control vs experiment (most common workflow). This is
    executed with the <LinkTo @route='docs.api.compare'><code>`tracerbench compare`</code></LinkTo> command.
  </p>
  <h4>
    Instrument your web application
  </h4>
  <p>Currently, in order for TracerBench to know when to stop analyzing your application it needs to redirect to
    <code>about:blank</code> after the <code>Paint</code> event following the last <code>marker</code> you care about.
    This is done by using a <code>performance.mark</code> function call. TracerBench instrumentation is so
    thin it can be "checked-in" and bundled in your app. Examples:
  </p>
  <pre><code><span class="comment">// js example</span>function renderEnd() {
  if (location.search === '?tracing') {
    const observer = new PerformanceObserver((list) => {
      const navEntries = list.getEntriesByType('navigation');
      if (navEntries.length > 0) {
        navEntries.forEach((entry) => {
          if (entry.loadEventEnd) {
            requestIdleCallback(() => {
              document.location.href = 'about:blank';
            });
          }
        });
      }
    });
    observer.observe({
      entryTypes: ['navigation']
    });
  }
}</code></pre>
  <pre><code><span class="comment">// ember example<br/>// adding the following to the router</span><span class="comment">// even add custom markers with performance.mark</span>export default class Router extends EmberRouter {
  location = config.locationType;
  rootURL = config.rootURL;
  constructor() {
    super(...arguments);
    this.on('routeDidChange', () => {
      performance.mark('didTransition');
      schedule('afterRender', this, renderEnd);
    });
  }
}
</code></pre>
  <h4>Run Compare</h4>
  <p>As a quick basic example, try running an A/A test with <code>tracerbench compare</code> against this instrumented
    site! (When
    running compare against identical builds for the control and experiment its called an A/A test).</p>

  <h4>Done!</h4>
  <p>Remember this was a basic example, scratching the surface of what TracerBench has to offer! Be sure to
    review the API docs for <LinkTo @route="docs.api.compare"><code>tracerbench compare</code>.</LinkTo>
  </p>
  <pre><code><span class="comment"># tracerbench/3.1.1 darwin-x64 node-v12.16.2</span>tracerbench compare --controlURL=https://www.tracerbench.com --experimentURL=https://www.tracerbench.com</code></pre>
  <h2 id="profile">Profile Workflow</h2>
  <hr>
  <p>Gaining insight into user-timings from a single Chrome trace. This is executed with the
    <LinkTo @route='docs.api.profile'><code>`tracerbench profile`</code></LinkTo> command.</p>
  <pre><code><span class="comment"># optionally record a har before running profile</span>tracerbench record-har --url=https://www.tracerbench.com --headless && tracerbench profile ./tracerbench.har<br/>...<br/><em class="blue">    Marker Timings :: Total Duration 1483.15 ms    </em>

Navigation Start
<span class="grey">■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■</span> 0 ms

Fetch Start
<span class="grey">■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■</span> 0.15 ms

Response End
<span class="blue">■■■■■■</span><span class="grey">■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■</span> 160.41 ms

Dom Loading
<span class="blue">■■■■■■</span><span class="grey">■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■</span> 165.42 ms

First Paint
<span class="blue">■■■■■■■■■■■■</span><span class="grey">■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■</span> 301.9 ms

First Meaningful Paint Candidate
<span class="blue">■■■■■■■■■■■■</span><span class="grey">■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■</span> 301.9 ms

Dom Interactive
<span class="blue">■■■■■■■■■■■■■■■■■■■■■■■■■■■■</span><span class="grey">■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■</span> 705.61 ms

Dom Content Loaded Event Start
<span class="blue">■■■■■■■■■■■■■■■■■■■■■■■■■■■■</span><span class="grey">■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■</span> 705.64 ms

Dom Content Loaded Event End
<span class="blue">■■■■■■■■■■■■■■■■■■■■■■■■■■■■</span><span class="grey">■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■</span> 706.08 ms

First Meaningful Paint Candidate
<span class="blue">■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■</span><span class="grey">■■■■■■■■■■■■■■■■■■■■■■■■■</span> 851.86 ms

First Contentful Paint
<span class="blue">■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■</span><span class="grey">■■■■■■■■■■■■■■■■■■■■■■■■■</span> 851.86 ms

First Meaningful Paint
<span class="blue">■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■</span><span class="grey">■■■■■■■■■■■■■■■■■■■■■■■■■</span> 851.86 ms

First Meaningful Paint
<span class="blue">■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■</span><span class="grey">■■■■■■■■■■■■■■■■■■■■■■■■■</span> 851.86 ms

First Image Paint
<span class="blue">■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■</span><span class="grey">■■■■■■■■■■■■■■■■■■■■■■</span> 914.62 ms

Largest Contentful Paint:: Candidate
<span class="blue">■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■</span><span class="grey">■■■■■■■■■■■■■■■■■■■■■■</span> 914.62 ms

Dom Complete
<span class="blue">■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■</span> 1483.13 ms

Load Event Start
<span class="blue">■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■</span> 1483.14 ms

Load Event End
<span class="blue">■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■</span> 1483.15 ms</code></pre>

</article>