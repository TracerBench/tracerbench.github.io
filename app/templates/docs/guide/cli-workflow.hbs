<article>
  <h2 id="intro">
    Command Line Interface Workflow
  </h2>
  <hr />
  <p>
    TracerBench is most commonly consumed two ways, via CLI and CI. The CLI allows for a developer to quickly run a
    performance benchmark locally. While leveraging TracerBench in CI, drastically aides in the flagging and prevention
    of a performance regression within a web application over time. The <a target="_blank"
      href="https://www.npmjs.com/package/tracerbench">CLI</a> has two primary workflows:
  </p>

  <h2 id="compare">Compare Workflow</h2>
  <hr>
  <p> Comparing the performance delta between two builds, control vs experiment (most common workflow). This is
    executed with the <LinkTo @route='docs.api.compare'><code>`tracerbench compare`</code></LinkTo> command.
  </p>
  <h4>
    Instrument your web application
  </h4>
  <pre><code><span class="comment">// app/router.js | ember example<br/>// adding the following performance markers</span>import EmberRouter from '@ember/routing/router';
import { schedule } from '@ember/runloop';
import config from './config/environment';

export default class Router extends EmberRouter {
  location = config.locationType;
  rootURL = config.rootURL;
  constructor() {
    super(...arguments);
    performance.mark('startRouting');
    this.on('willTransition', function () {
      performance.mark('willTransition');
    });

    this.on('routeDidChange', () => {
      performance.mark('didTransition');
      schedule('afterRender', renderEnd);
    });
  }
}

<span class="comment">// schedule this example renderEnd function which will mark and measure your app</span>function renderEnd() {
  performance.mark('renderEnd');
  requestAnimationFrame(function () {
    performance.mark('beforePaint');
    requestAnimationFrame(function () {
      performance.mark('afterPaint');
      performance.measure('document', 'navigationStart', 'domLoading');
      performance.measure('jquery', 'domLoading', 'jqueryLoaded');
      performance.measure('ember', 'jqueryLoaded', 'emberLoaded');
      performance.measure('application', 'emberLoaded', 'startRouting');
      performance.measure('routing', 'startRouting', 'willTransition');
      performance.measure('transition', 'willTransition', 'didTransition');
      performance.measure('render', 'didTransition', 'renderEnd');
      performance.measure('afterRender', 'renderEnd', 'beforePaint');
      performance.measure('paint', 'beforePaint', 'afterPaint');
    });
  });
}
</code></pre>
  <pre><code><span class="comment">// app/index.html | ember example<br/>// adding the following performance markers<br/>// after loading jquery script</span>performance.mark("jqueryLoaded");
  <span class="comment">// after loading vendor script</span>if (Ember) performance.mark("emberLoaded");
</code></pre>
  <h4>Run Compare</h4>
  <p>As a quick basic example, try running an A/A test with <code>tracerbench compare</code> against this instrumented
    site! (When
    running compare against identical builds for the control and experiment its called an A/A test).</p>

  <h4>Done!</h4>
  <p>Remember this was a basic example, scratching the surface of what TracerBench has to offer! Be sure to
    review the API docs for <LinkTo @route="docs.api.compare"><code>tracerbench compare</code>.</LinkTo>
  </p>
  <pre><code><span class="comment"># tracerbench/6.0.0 darwin-x64 node-v14.16.0</span>tracerbench compare --controlURL https://www.tracerbench.com --experimentURL https://www.tracerbench.com --markers fetchStart,jqueryLoaded,emberLoaded,startRouting,willTransition,didTransition,renderEnd --headless --report</code></pre>
</article>